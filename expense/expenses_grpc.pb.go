// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: expense/expenses.proto

package finance_tracker_proto_files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Expense_CreateExpense_FullMethodName = "/Expense/CreateExpense"
)

// ExpenseClient is the client API for Expense service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenseClient interface {
	CreateExpense(ctx context.Context, in *CreateExenseRequest, opts ...grpc.CallOption) (*CreateExpenseResponse, error)
}

type expenseClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseClient(cc grpc.ClientConnInterface) ExpenseClient {
	return &expenseClient{cc}
}

func (c *expenseClient) CreateExpense(ctx context.Context, in *CreateExenseRequest, opts ...grpc.CallOption) (*CreateExpenseResponse, error) {
	out := new(CreateExpenseResponse)
	err := c.cc.Invoke(ctx, Expense_CreateExpense_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseServer is the server API for Expense service.
// All implementations must embed UnimplementedExpenseServer
// for forward compatibility
type ExpenseServer interface {
	CreateExpense(context.Context, *CreateExenseRequest) (*CreateExpenseResponse, error)
	mustEmbedUnimplementedExpenseServer()
}

// UnimplementedExpenseServer must be embedded to have forward compatible implementations.
type UnimplementedExpenseServer struct {
}

func (UnimplementedExpenseServer) CreateExpense(context.Context, *CreateExenseRequest) (*CreateExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpense not implemented")
}
func (UnimplementedExpenseServer) mustEmbedUnimplementedExpenseServer() {}

// UnsafeExpenseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseServer will
// result in compilation errors.
type UnsafeExpenseServer interface {
	mustEmbedUnimplementedExpenseServer()
}

func RegisterExpenseServer(s grpc.ServiceRegistrar, srv ExpenseServer) {
	s.RegisterService(&Expense_ServiceDesc, srv)
}

func _Expense_CreateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServer).CreateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Expense_CreateExpense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServer).CreateExpense(ctx, req.(*CreateExenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Expense_ServiceDesc is the grpc.ServiceDesc for Expense service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Expense_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Expense",
	HandlerType: (*ExpenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpense",
			Handler:    _Expense_CreateExpense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expense/expenses.proto",
}
